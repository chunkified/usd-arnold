#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
    customLayerData = {
        string[] appliedAPISchemas = ["AiNodeAPI", "AiShapeAPI", "AiVolumeAPI", "AiLightAPI", "AiMaterialAPI"]
        string[] multipleApplyAPISchemas = []
    }
)

class "AiNodeAPI" (
    doc = """API for handling prims as Arnold nodes. Provides a consistent
             interface for getting and setting user parameters."""
)
{
    uniform token info:node_entry_type (
        doc = """The node entry type identifies the type of the node entry for each arnold node.
                 Like, camera, shape, procedural, shader, filter, driver, etc.
        """
    )
}

class "AiShapeAPI" (
    doc = """API for interacting with common Arnold shape parameters on prims.

             Currently handles:
             - The bitmasks `visibility` and `sidedness`
             - The boolean flags `matte`, `opaque`, `self_shadows`, and
               `receive_shadows`.

            To access the ray types without installing arnold,
            include rayTypes.h and use the namespace arnold.

            Arnold 5 ray types
                AI_RAY_UNDEFINED         undefined type
                AI_RAY_CAMERA            ray originating at the camera
                AI_RAY_SHADOW            shadow ray towards a light source
                AI_RAY_DIFFUSE_TRANSMIT  indirect diffuse transmission ray
                AI_RAY_SPECULAR_TRANSMIT indirect specular transmission ray
                AI_RAY_VOLUME            indirect volume scattering ray
                AI_RAY_DIFFUSE_REFLECT   indirect diffuse reflection ray
                AI_RAY_SPECULAR_REFLECT  indirect specular reflection ray
                AI_RAY_SUBSURFACE        subsurface scattering probe ray

                AI_RAY_ALL_DIFFUSE  all indirect diffuse ray types
                AI_RAY_ALL_SPECULAR all indirect specular ray types
                AI_RAY_ALL_REFLECT  all reflection ray types
                AI_RAY_ALL_TRANSMIT all transmission specular ray types
                AI_RAY_ALL          mask for all ray types"""
)
{
    uniform bool ai:autobump_visibility:camera = 1 (
        doc = "Whether the autobump is enabled for camera rays."
    )
    uniform bool ai:autobump_visibility:diffuse_reflect = 0 (
        doc = "Whether the autobump is enabled for diffuse reflection rays."
    )
    uniform bool ai:autobump_visibility:diffuse_transmit = 0 (
        doc = "Whether the autobump is enabled for diffuse transmission rays."
    )
    uniform bool ai:autobump_visibility:shadow = 0 (
        doc = "Whether the autobump is enabled for shadow rays."
    )
    uniform bool ai:autobump_visibility:specular_reflect = 0 (
        doc = "Whether the autobump is enabled for specular reflection rays."
    )
    uniform bool ai:autobump_visibility:specular_transmit = 0 (
        doc = "Whether the autobump is enabled for specular transmission rays."
    )
    uniform bool ai:autobump_visibility:subsurface = 0 (
        doc = "Whether the autobump is enabled for subsurface scattering rays."
    )
    uniform bool ai:autobump_visibility:volume = 0 (
        doc = "Whether the autobump is enabled for volume scattering rays."
    )
    uniform bool ai:disp_autobump = 0
    uniform float ai:disp_height = 1
    uniform float ai:disp_padding = 0
    uniform float ai:disp_zero_value = 0
    rel ai:light_group (
        doc = "Light groups for the shape."
    )
    uniform bool ai:matte = 0 (
        doc = """This attribute, when enabled, turns an object or group into a
                 holdout matte. This affects primary rays only.

                 The matte color is always black, and the opacity of the object
                 is preserved. Shaders will not run on the object, and it will
                 output all black (including the alpha), except if the opaque
                 flag is off, in which case shaders will be run to compute the
                 opacity only. Note that even AOVs output by its shaders in this
                 case will be black."""
    )
    uniform bool ai:opaque = 1 (
        doc = """Whether the object should be considered fully opaque. By
                 default all objects are marked as opaque, because it speeds up
                 rendering considerably."""
    )
    uniform float ai:ray_bias = 0.000001 (
        doc = "Ray bias for handling precision issues."
    )
    uniform bool ai:receive_shadows = 1 (
        doc = "Whether the object picks up shadows from other objects."
    )
    uniform bool ai:self_shadows = 1 (
        doc = "Whether the object casts shadows on itself."
    )
    rel ai:shadow_group (
        doc = "Shadow groups for the shape."
    )
    uniform bool ai:sidedness:camera = 1 (
        doc = "Whether the object is double-sided to camera rays."
    )
    uniform bool ai:sidedness:diffuse_reflect = 1 (
        doc = "Whether the object is double-sided to diffuse reflection rays."
    )
    uniform bool ai:sidedness:diffuse_transmit = 1 (
        doc = "Whether the object is double-sided to diffuse transmission rays."
    )
    uniform bool ai:sidedness:shadow = 1 (
        doc = "Whether the object is double-sided to shadow rays."
    )
    uniform bool ai:sidedness:specular_reflect = 1 (
        doc = "Whether the object is double-sided to specular reflection rays."
    )
    uniform bool ai:sidedness:specular_transmit = 1 (
        doc = "Whether the object is double-sided to specular transmission rays."
    )
    uniform bool ai:sidedness:subsurface = 1 (
        doc = "Whether the object is double-sided to subsurface scattering rays."
    )
    uniform bool ai:sidedness:volume = 1 (
        doc = "Whether the object is double-sided to volume scattering rays."
    )
    uniform bool ai:smoothing = 0
    uniform float ai:subdiv_adaptive_error = 0
    uniform token ai:subdiv_adaptive_metric = "auto_" (
        allowedTokens = ["auto_", "edge_length", "flatness"]
    )
    uniform token ai:subdiv_adaptive_space = "raster" (
        allowedTokens = ["raster", "object"]
    )
    rel ai:subdiv_dicing_camera
    uniform uint ai:subdiv_iterations = 1
    uniform bool ai:subdiv_smooth_derivs = 0
    uniform token ai:subdiv_type = "none" (
        allowedTokens = ["none", "catclark", "linear"]
    )
    uniform token ai:subdiv_uv_smoothing = "pin_corners" (
        allowedTokens = ["pin_corners", "pin_borders", "linear", "smooth"]
    )
    uniform token ai:transform_type = "rotate_about_center" (
        allowedTokens = ["linear", "rotate_about_origin", "rotate_about_center"]
    )
    uniform bool ai:use_light_group = 0 (
        doc = "Enable the use of light groups."
    )
    uniform bool ai:use_shadow_group = 0 (
        doc = "Enable the use of shadow groups."
    )
    uniform bool ai:visibility:camera = 1 (
        doc = "Whether the object is visible to camera rays."
    )
    uniform bool ai:visibility:diffuse_reflect = 1 (
        doc = "Whether the object is visible to diffuse reflection rays."
    )
    uniform bool ai:visibility:diffuse_transmit = 1 (
        doc = "Whether the object is visible to diffuse transmission rays."
    )
    uniform bool ai:visibility:shadow = 1 (
        doc = "Whether the object is visible to shadow rays."
    )
    uniform bool ai:visibility:specular_reflect = 1 (
        doc = "Whether the object is visible to specular reflection rays."
    )
    uniform bool ai:visibility:specular_transmit = 1 (
        doc = "Whether the object is visible to specular transmission rays."
    )
    uniform bool ai:visibility:subsurface = 1 (
        doc = "Whether the object is visible to subsurface scattering rays."
    )
    uniform bool ai:visibility:volume = 1 (
        doc = "Whether the object is visible to volume scattering rays."
    )
}

class "AiVolumeAPI" (
    doc = "API for interacting with common Arnold volume node parameters on prims."
)
{
    uniform bool ai:compress = 1 (
        doc = """Whether to compress grids to reduce memory usage. This is a
                 lossy compression, however in most cases renders will be almost
                 the same."""
    )
    float ai:step_scale = 1 (
        doc = """A scaling factor applied to the step size, mostly useful when 
                 `step_size` is set to 0 to modulate the automatic value."""
    )
    float ai:step_size = 0 (
        doc = """The step size for sampling inside the volume. If this is set to
                 0, a step size will be automatically calculated based on the
                 volume's grid information."""
    )
    float ai:velocity_fps = 24 (
        doc = "The frame rate of the velocity value."
    )
    float ai:velocity_outlier_threshold = 0.001 (
        doc = """Controls the filtering of noisy velocities, which can result in
                 faster rendering of motion blur from physics simulations. The
                 default value of 0.001 should have little to no visual impact.
                 Setting this to zero disables filtering entirely."""
    )
    float ai:velocity_scale = 1 (
        doc = """A scale factor for the velocity field. A value of 0 disables 
                 motion blur."""
    )
    float ai:volume_padding = 0 (
        doc = "Amount to enlarge the volume bounds by."
    )
}

class "AiLightAPI" (
    doc = "API for interacting with common Arnold light parameters."
)
{
    uniform string ai:aov = "" (
        doc = "The name of the output AOV for the light."
    )
}

class "AiMaterialAPI" (
    doc = "API for Material prims encapsulating Arnold shading networks."
)
{
    rel ai:displacement
    rel ai:surface
    rel ai:volume
}

class AiShader "AiShader" (
    doc = "Represents an Arnold shader node."
)
{
    uniform token info:id (
        doc = """The id is an identifier for the type or purpose of the 
        shader. E.g.: Texture or FractalFloat.
        The use of this id will depend on the render target: some will turn it
        into an actual shader path, some will use it to generate shader source 
        code dynamically.
        
        \\sa SetShaderId()
        """
    )
    uniform token info:implementationSource = "id" (
        allowedTokens = ["id", "sourceAsset", "sourceCode"]
        doc = """Specifies the attribute that should be consulted to get the 
        shader's implementation or its source code.

        * If set to \"id\", the \"info:id\" attribute's value is used to 
        determine the shader source from the shader registry.
        * If set to \"sourceAsset\", the resolved value of the \"info:sourceAsset\" 
        attribute corresponding to the desired implementation (or source-type)
        is used to locate the shader source.
        * If set to \"sourceCode\", the value of \"info:sourceCode\" attribute 
        corresponding to the desired implementation (or source type) is used as 
        the shader source.
        """
    )
}

class AiProcedural "AiProcedural" (
    doc = """Represents an Arnold procedural node, defined in terms of a scene
             description file (.ass, .obj, or .ply)."""
)
{
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement.  Whenever any geometry-affecting attribute is authored
        for any gprim in a layer, extent must also be authored at the same
        timesample; failure to do so will result in incorrect bounds-computation.
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    asset filepath (
        doc = "The path to the scene description file."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class AiProceduralNode "AiProceduralNode" (
    doc = """Represents a custom Arnold procedural node. The node type name must
             be supplied. Procedural arguments should be specified as attributes
             in the `user:` namespace."""
)
{
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement.  Whenever any geometry-affecting attribute is authored
        for any gprim in a layer, extent must also be authored at the same
        timesample; failure to do so will result in incorrect bounds-computation.
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    asset filepath = @@ (
        doc = """Path to the DSO which defines the custom procedural node type.
                 This is optional if the DSO will be found on the Arnold plugin
                 path or using other means."""
    )
    uniform token nodeType (
        doc = "The name of the custom procedural node entry to use."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class AiVolumeProcedural "AiVolumeProcedural" (
    doc = """Handling of custom volume procedurals. The parameters are identical
             to those of AiProcedural, with the addition of `step_size`."""
)
{
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement.  Whenever any geometry-affecting attribute is authored
        for any gprim in a layer, extent must also be authored at the same
        timesample; failure to do so will result in incorrect bounds-computation.
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    asset filepath (
        doc = "The path to the scene description file."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    float step_size = 0 (
        doc = """Sampling step size inside the volume.
                 0 means equal to the smallest axis of each voxel."""
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class AiVolume "AiVolume" (
    doc = """Represents an Arnold volume node.
             This node is designed to handle OpenVDB files, so we don't
             inherit from AiProcedural.
    """
)
{
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement.  Whenever any geometry-affecting attribute is authored
        for any gprim in a layer, extent must also be authored at the same
        timesample; failure to do so will result in incorrect bounds-computation.
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    asset filename = @@ (
        doc = "Asset path to the file containg the volume data."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    float step_size = 0 (
        doc = """Sampling step size inside the volume.
                 0 means equal to the smallest axis of each voxel."""
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class AiAOV "AiAOV" (
    doc = """Represents an Arnold output target. 

             Defined by a name, a data type, a driver, and a filter."""
)
{
    token dataType = "RGBA" (
        allowedTokens = ["BYTE", "INT", "UINT", "BOOL", "FLOAT", "RGB", "RGBA", "VECTOR", "VECTOR2", "POINTER", "NODE", "ARRAY", "MATRIX"]
    )
    rel driver
    rel filter
    uniform string LPE = "" (
        doc = "The Light Path Expression for the AOV."
    )
    uniform string name (
        doc = "The name of the AOV."
    )
}

class AiDriver "AiDriver" (
    doc = "Represents an Arnold driver."
)
{
    uniform string path (
        doc = "Output path for the driver"
    )
}

class AiFilter "AiFilter" (
    doc = "Represents an Arnold filter."
)
{
    uniform float size (
        doc = "The size of the filter."
    )
}

