#usda 1.0
(
    "This file describes various Arnold USD schemata for code generation."
    subLayers = [
        @usd/schema.usda@,
        @usdGeom/schema.usda@,
        @usdShade/schema.usda@
    ]
)

def "GLOBAL" (
    customData = {
        string libraryName = "usdAi"
        string libraryPath = "pxr/usd/usdAi"
        # Because I'm including the "Ai" prefix in the schema class names, I'm
        # omitting it from the library prefix so the classes don't end up with
        # names like "UsdAiAiShader".
        string libraryPrefix = "Usd"
        string tokensPrefix = "UsdAi"
        dictionary libraryTokens = {
            dictionary userPrefix = {
                string value = "user:"
                string doc = """The attribute prefix used to qualify user
                                parameters on nodes using the AiNodeAPI."""
            }
            dictionary paramType = {
                string doc = """Stores the arnold parameter type for a parameter."""
            }
            dictionary elemType = {
                string doc = """Stores the arnold parameter type for an array."""
            }
            dictionary filename = {
                string doc = """Stores the file the plugin was loaded from."""
            }
        }
    }
)
{
}

class "AiNodeAPI" (
    inherits = </APISchemaBase>
    doc = """API for handling prims as Arnold nodes. Provides a consistent
             interface for getting and setting user parameters."""
    customData = {
        string extraIncludes = """
struct AtMetaDataEntry;"""
    }
) {
    uniform token info:node_entry_type (
        doc = """The node entry type identifies the type of the node entry for each arnold node.
                 Like, camera, shape, procedural, shader, filter, driver, etc.
        """
        customData = {
            string apiName = "NodeEntryType"
        }
    )
}

class "AiShapeAPI" (
    inherits = </APISchemaBase>
    doc = """API for interacting with common Arnold shape parameters on prims.

             Currently handles:
             - The bitmasks `visibility` and `sidedness`
             - The boolean flags `matte`, `opaque`, `self_shadows`, and
               `receive_shadows`.

            To access the ray types without installing arnold,
            include rayTypes.h and use the namespace arnold.

            Arnold 5 ray types
                AI_RAY_UNDEFINED         undefined type
                AI_RAY_CAMERA            ray originating at the camera
                AI_RAY_SHADOW            shadow ray towards a light source
                AI_RAY_DIFFUSE_TRANSMIT  indirect diffuse transmission ray
                AI_RAY_SPECULAR_TRANSMIT indirect specular transmission ray
                AI_RAY_VOLUME            indirect volume scattering ray
                AI_RAY_DIFFUSE_REFLECT   indirect diffuse reflection ray
                AI_RAY_SPECULAR_REFLECT  indirect specular reflection ray
                AI_RAY_SUBSURFACE        subsurface scattering probe ray

                AI_RAY_ALL_DIFFUSE  all indirect diffuse ray types
                AI_RAY_ALL_SPECULAR all indirect specular ray types
                AI_RAY_ALL_REFLECT  all reflection ray types
                AI_RAY_ALL_TRANSMIT all transmission specular ray types
                AI_RAY_ALL          mask for all ray types"""

    customData = {
        string extraIncludes = """
#include "pxr/usd/usdAi/rayTypes.h"
"""
    }
) {
    # --- shape properties --- #

    uniform bool ai:opaque = true (
        doc = """Whether the object should be considered fully opaque. By
                 default all objects are marked as opaque, because it speeds up
                 rendering considerably."""
        customData = {
            string apiName = "aiOpaque"
        }
    )

    uniform bool ai:matte = false (
        doc = """This attribute, when enabled, turns an object or group into a
                 holdout matte. This affects primary rays only.

                 The matte color is always black, and the opacity of the object
                 is preserved. Shaders will not run on the object, and it will
                 output all black (including the alpha), except if the opaque
                 flag is off, in which case shaders will be run to compute the
                 opacity only. Note that even AOVs output by its shaders in this
                 case will be black."""
        customData = {
            string apiName = "aiMatte"
        }
    )

    uniform float ai:ray_bias = 0.000001 (
        doc = """Ray bias for handling precision issues."""
        customData = {
            string apiName = "aiRayBias"
        }
    )

    uniform bool ai:receive_shadows = true (
        doc = """Whether the object picks up shadows from other objects."""
        customData = {
            string apiName = "aiReceiveShadows"
        }
    )

    uniform bool ai:self_shadows = true (
        doc = """Whether the object casts shadows on itself."""
        customData = {
            string apiName = "aiSelfShadows"
        }
    )

    uniform token ai:transform_type = "rotate_about_center" (
        customData = {
            string apiName = "aiTransformType"
        }
        allowedTokens = ["linear", "rotate_about_origin", "rotate_about_center"]
    )

    # visibility

    uniform bool ai:visibility:camera = true (
        doc = """Whether the object is visible to camera rays."""
        customData = {
            string apiName = "aiVisibleToCamera"
        }
    )

    uniform bool ai:visibility:shadow = true (
        doc = """Whether the object is visible to shadow rays."""
        customData = {
            string apiName = "aiVisibleToShadow"
        }
    )

    uniform bool ai:visibility:diffuse_transmit = true (
        doc = """Whether the object is visible to diffuse transmission rays."""
        customData = {
            string apiName = "aiVisibleToDiffuseTransmit"
        }
    )

    uniform bool ai:visibility:specular_transmit = true (
        doc = """Whether the object is visible to specular transmission rays."""
        customData = {
            string apiName = "aiVisibleToSpecularTransmit"
        }
    )

    uniform bool ai:visibility:volume = true (
        doc = """Whether the object is visible to volume scattering rays."""
        customData = {
            string apiName = "aiVisibleToVolume"
        }
    )

    uniform bool ai:visibility:diffuse_reflect = true (
        doc = """Whether the object is visible to diffuse reflection rays."""
        customData = {
            string apiName = "aiVisibleToDiffuseReflect"
        }
    )

    uniform bool ai:visibility:specular_reflect = true (
        doc = """Whether the object is visible to specular reflection rays."""
        customData = {
            string apiName = "aiVisibleToSpecularReflect"
        }
    )

    uniform bool ai:visibility:subsurface = true (
        doc = """Whether the object is visible to subsurface scattering rays."""
        customData = {
            string apiName = "aiVisibleToSubsurface"
        }
    )

#    (
#        doc = """The visibility of the object for each Arnold ray type, as a
#                 bitmask.
#
#                 You can selectively disable an object's visibility for the
#                 various types of rays in the renderer. By default, objects are
#                 visible to all types of rays."""
#    )

    uniform bool ai:sidedness:camera = true (
        doc = """Whether the object is double-sided to camera rays."""
        customData = {
            string apiName = "aiDoubleSidedToCamera"
        }
    )

    uniform bool ai:sidedness:shadow = true (
        doc = """Whether the object is double-sided to shadow rays."""
        customData = {
            string apiName = "aiDoubleSidedToShadow"
        }
    )

    uniform bool ai:sidedness:diffuse_transmit = true (
        doc = """Whether the object is double-sided to diffuse transmission rays."""
        customData = {
            string apiName = "aiDoubleSidedToDiffuseTransmit"
        }
    )

    uniform bool ai:sidedness:specular_transmit = true (
        doc = """Whether the object is double-sided to specular transmission rays."""
        customData = {
            string apiName = "aiDoubleSidedToSpecularTransmit"
        }
    )

    uniform bool ai:sidedness:volume = true (
        doc = """Whether the object is double-sided to volume scattering rays."""
        customData = {
            string apiName = "aiDoubleSidedToVolume"
        }
    )

    uniform bool ai:sidedness:diffuse_reflect = true (
        doc = """Whether the object is double-sided to diffuse reflection rays."""
        customData = {
            string apiName = "aiDoubleSidedToDiffuseReflect"
        }
    )

    uniform bool ai:sidedness:specular_reflect = true (
        doc = """Whether the object is double-sided to specular reflection rays."""
        customData = {
            string apiName = "aiDoubleSidedToSpecularReflect"
        }
    )

    uniform bool ai:sidedness:subsurface = true (
        doc = """Whether the object is double-sided to subsurface scattering rays."""
        customData = {
            string apiName = "aiDoubleSidedToSubsurface"
        }
    )

#    (
#        doc = """The double-sidedness of the object for each Arnold ray type, as
#                 a bitmask.
#
#                 Just as you can disable an object's visibility for specific ray
#                 types, you can also change its sidedness. By default, objects
#                 are double-sided for all rays."""
#    )

    # autobump visibility

    uniform bool ai:autobump_visibility:camera = true (
        doc = """Whether the autobump is enabled for camera rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToCamera"
        }
    )

    uniform bool ai:autobump_visibility:shadow = false (
        doc = """Whether the autobump is enabled for shadow rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToShadow"
        }
    )

    uniform bool ai:autobump_visibility:diffuse_transmit = false (
        doc = """Whether the autobump is enabled for diffuse transmission rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToDiffuseTransmit"
        }
    )

    uniform bool ai:autobump_visibility:specular_transmit = false (
        doc = """Whether the autobump is enabled for specular transmission rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToSpecularTransmit"
        }
    )

    uniform bool ai:autobump_visibility:volume = false (
        doc = """Whether the autobump is enabled for volume scattering rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToVolume"
        }
    )

    uniform bool ai:autobump_visibility:diffuse_reflect = false (
        doc = """Whether the autobump is enabled for diffuse reflection rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToDiffuseReflect"
        }
    )

    uniform bool ai:autobump_visibility:specular_reflect = false (
        doc = """Whether the autobump is enabled for specular reflection rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToSpecularReflect"
        }
    )

    uniform bool ai:autobump_visibility:subsurface = false (
        doc = """Whether the autobump is enabled for subsurface scattering rays."""
        customData = {
            string apiName = "aiAutobumpVisibleToSubsurface"
        }
    )

#    (
#        doc = """The autobump of the object for each Arnold ray type, as
#                 a bitmask.
#
#                 Just as you can disable an object's visibility for specific ray
#                 types, you can also change its autobump. By default, autobump
#                 is only enabled for camera rays."""
#    )

    # --- light group properties --- #
    uniform bool ai:use_light_group = false (
        doc = """Enable the use of light groups."""
        customData = {
            string apiName = "aiUseLightGroup"
        }
    )

    rel ai:light_group (
        doc = """Light groups for the shape."""
        customData = {
            string apiName = "aiLightGroup"
        }
    )

    uniform bool ai:use_shadow_group = false (
        doc = """Enable the use of shadow groups."""
        customData = {
            string apiName = "aiUseShadowGroup"
        }
    )

    rel ai:shadow_group (
        doc = """Shadow groups for the shape."""
        customData = {
            string apiName = "aiShadowGroup"
        }
    )

    # --- polymesh properties --- #
    uniform bool ai:smoothing = false (
        customData = {
            string apiName = "aiSmoothing"
        }
    )

    uniform token ai:subdiv_type = "none" (
        customData = {
            string apiName = "aiSubdivType"
        }
        allowedTokens = ["none", "catclark", "linear"]
    )

    uniform uint ai:subdiv_iterations = 1 (
        customData = {
            string apiName = "aiSubdivIterations"
        }
    )

    uniform float ai:subdiv_adaptive_error = 0 (
        customData = {
            string apiName = "aiSubdivAdaptiveError"
        }
    )

    uniform token ai:subdiv_adaptive_metric = "auto_" (
        customData = {
            string apiName = "aiSubdivAdaptiveMetric"
        }
        # FIXME: auto -> auto_ (is there a way to specify the API name of a token?)
        allowedTokens = ["auto_", "edge_length", "flatness"]
    )

    uniform token ai:subdiv_adaptive_space = "raster" (
        customData = {
            string apiName = "aiSubdivAdaptiveSpace"
        }
        allowedTokens = ["raster", "object"]
    )

    uniform token ai:subdiv_uv_smoothing = "pin_corners" (
        customData = {
            string apiName = "aiSubdivUVSmoothing"
        }
        allowedTokens = ["pin_corners", "pin_borders", "linear", "smooth"]
    )

    uniform bool ai:subdiv_smooth_derivs = false (
        customData = {
            string apiName = "aiSubdivSmoothDerivs"
        }
    )

    uniform float ai:disp_padding = 0 (
        customData = {
            string apiName = "aiDispPadding"
        }
    )

    uniform float ai:disp_height = 1 (
        customData = {
            string apiName = "aiDispHeight"
        }
    )

    uniform float ai:disp_zero_value = 0 (
        customData = {
            string apiName = "aiDispZeroValue"
        }
    )

    uniform bool ai:disp_autobump = false (
        customData = {
            string apiName = "aiDispAutobump"
        }
    )

    rel ai:subdiv_dicing_camera

}

class "AiVolumeAPI" (
    inherits = </APISchemaBase>
    doc = """API for interacting with common Arnold volume node parameters on prims."""
) {
    float ai:volume_padding = 0 (
        doc = """Amount to enlarge the volume bounds by."""
        customData = {
            string apiName = "aiVolumePadding"
        }
    )

    float ai:step_size = 0 (
        doc = """The step size for sampling inside the volume. If this is set to
                 0, a step size will be automatically calculated based on the
                 volume's grid information."""
        customData = {
            string apiName = "aiStepSize"
        }
    )

    float ai:step_scale = 1 (
        doc = """A scaling factor applied to the step size, mostly useful when 
                 `step_size` is set to 0 to modulate the automatic value."""
        customData = {
            string apiName = "aiStepScale"
        }
    )

    uniform bool ai:compress = true (
        doc = """Whether to compress grids to reduce memory usage. This is a
                 lossy compression, however in most cases renders will be almost
                 the same."""
        customData = {
            string apiName = "aiCompress"
        }
    )

    float ai:velocity_scale = 1 (
        doc = """A scale factor for the velocity field. A value of 0 disables 
                 motion blur."""
        customData = {
            string apiName = "aiVelocityScale"
        }
    )

    float ai:velocity_fps = 24 (
        doc = """The frame rate of the velocity value."""
        customData = {
            string apiName = "aiVelocityFPS"
        }
    )

    float ai:velocity_outlier_threshold = 0.001 (
        doc = """Controls the filtering of noisy velocities, which can result in
                 faster rendering of motion blur from physics simulations. The
                 default value of 0.001 should have little to no visual impact.
                 Setting this to zero disables filtering entirely."""
        customData = {
            string apiName = "aiVelocityOutlierThreshold"
        }
    )
}

class "AiLightAPI" (
    inherits = </APISchemaBase>
    doc = """API for interacting with common Arnold light parameters."""
) {
    uniform string ai:aov = "" (
        doc = """The name of the output AOV for the light."""
    )
}

class "AiMaterialAPI" (
    inherits = </APISchemaBase>
    doc = """API for Material prims encapsulating Arnold shading networks."""
) {
    rel ai:surface (
        customData = {
            string apiName = "surface"
        }
    )

    rel ai:displacement (
        customData = {
            string apiName = "displacement"
        }
    )

    rel ai:volume (
        customData = {
            string apiName = "volume"
        }
    )
}

class AiShader "AiShader" (
    doc = """Represents an Arnold shader node."""
    inherits = </Shader>
)
{
}

class AiProcedural "AiProcedural" (
    doc = """Represents an Arnold procedural node, defined in terms of a scene
             description file (.ass, .obj, or .ply)."""
    inherits = </Boundable>
) {
    asset filepath (
        doc = """The path to the scene description file."""
    )
}

class AiProceduralNode "AiProceduralNode" (
    doc = """Represents a custom Arnold procedural node. The node type name must
             be supplied. Procedural arguments should be specified as attributes
             in the `user:` namespace."""
    inherits = </AiProcedural>
) {
    asset filepath = @@ (
        doc = """Path to the DSO which defines the custom procedural node type.
                 This is optional if the DSO will be found on the Arnold plugin
                 path or using other means."""
    )

    uniform token nodeType (
        doc = """The name of the custom procedural node entry to use."""
    )
}

class AiVolumeProcedural "AiVolumeProcedural" (
    doc = """Handling of custom volume procedurals. The parameters are identical
             to those of AiProcedural, with the addition of `step_size`."""
    inherits = </AiProcedural>
) {
    float step_size = 0 (
        doc = """Sampling step size inside the volume.
                 0 means equal to the smallest axis of each voxel."""
        customData = {
            string apiName = "stepSize"
        }
    )
}

class AiVolume "AiVolume" (
    doc = """Represents an Arnold volume node.
             This node is designed to handle OpenVDB files, so we don't
             inherit from AiProcedural.
    """
    inherits = </Boundable>
) {
    asset filename = @@ (
        doc = "Asset path to the file containg the volume data."
    )

    float step_size = 0 (
        doc = """Sampling step size inside the volume.
                 0 means equal to the smallest axis of each voxel."""
        customData = {
            string apiName = "stepSize"
        }
    )
}

class AiAOV "AiAOV" (
    inherits = </Typed>
    doc = """Represents an Arnold output target. 

             Defined by a name, a data type, a driver, and a filter."""
) {
    uniform string name (
        doc = """The name of the AOV."""
    )
    token dataType = "RGBA" (
        allowedTokens = ["BYTE", "INT", "UINT", "BOOL", "FLOAT", "RGB", "RGBA", "VECTOR", "VECTOR2", "POINTER", "NODE", "ARRAY", "MATRIX"]
    )
    uniform string LPE = "" (
        doc = """The Light Path Expression for the AOV."""
    )
    rel driver
    rel filter
}

class AiDriver "AiDriver" (
    inherits = </Typed>
    doc = """Represents an Arnold driver."""
) {
    uniform string path (
        doc = """Output path for the driver"""
    )
}

class AiFilter "AiFilter" (
    inherits = </Typed>
    doc = """Represents an Arnold filter."""
) {
    uniform float size (
        doc = """The size of the filter."""
    )
}
